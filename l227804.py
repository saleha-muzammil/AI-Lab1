# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bppigX88mktOeoK4neMTy9ltsjlZVkFi
"""

#q1#
name=input (f"Enter your name: ")

age=input (f"Enter your age: ")

print (f"Hello {name}! your age is {age}" )

#q2#
def get_data_type(user_input):
    try:
        value = int(user_input)
        return (int, value)
    except ValueError:
        try:
            value = float(user_input)
            return (float, value)
        except ValueError:
            return (str, user_input)

user_input = input("Enter something: ")


data_type, value = get_data_type(user_input)

if data_type == int:
    print(f"You entered an integer: {value}")
elif data_type == float:
    print(f"You entered a float: {value}")
else:
    print(f"You entered a string: {value}")

#q3#
my_list = ["apple", "banana", "cherry"]

my_list.append("orange")

my_list.remove("banana")

for element in my_list:
  print(element.upper())

#q4#
fruits=["apple","banana"]
(orange,cherry)=fruits
print(orange)
print(cherry)

#q5#

student_grades = {}

for i in range(5):
    name = input(f"Enter the name of student {i + 1}: ")
    grade = input(f"Enter the grade of student {i + 1}: ")
    student_grades[name] = grade

print("Student Grades:")
print(student_grades)

#q6#
size = int(input("Enter the size of the lists: "))

list1 = []
print("Enter elements for the first list:")
for _ in range(size):
    list1.append(int(input()))

list2 = []
print("Enter elements for the second list:")
for _ in range(size):
    list2.append(int(input()))

set1 = set(list1)
set2 = set(list2)

union_set = set1.union(set2)
print("Union of sets:", union_set)

intersection_set = set1.intersection(set2)
print("Intersection of sets:", intersection_set)

difference_set = set1.difference(set2)
print("Difference (set1 - set2):", difference_set)

#q7#
num = int(input("Enter an integer: "))

if num > 0:
    print(f"{num} is positive.")
elif num < 0:
    print(f"{num} is negative.")
else:
    print(f"{num} is zero.")

if num % 2 == 0:
    print(f"{num} is even.")
else:
    print(f"{num} is odd.")

#q8#
for i in range(1, 51):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 3 == 0:
        print("Fizz")
    elif i % 5 == 0:
        print("Buzz")
    else:
        print(i)

#q9#
def factorial_loop(n):

    if n < 0:
        raise ValueError("Factorial is not defined for negative numbers.")
    elif n == 0:
        return 1
    else:
        factorial = 1
        for i in range(1, n + 1):
            factorial *= i
        return factorial

number = 5
result = factorial_loop(number)
print(f"The factorial of {number} is {result}")

#q10#
def is_prime(number):

    if number <= 1:
        return False

    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

num = int(input("Enter a number: "))

if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

#q11#
def square_numbers(numbers):

  return [number**2 for number in numbers]

numbers = [1, 2, 3, 4, 5]
squared_numbers = square_numbers(numbers)
print(f"Original list: {numbers}")
print(f"Squared list: {squared_numbers}")

#q12#
def merge_dictionaries(dict1, dict2):

  merged_dict = dict1.copy()
  merged_dict.update(dict2)
  return merged_dict

dict1 = {'a': 1, 'b': 2, 'c': 3}
dict2 = {'b': 4, 'd': 5}
merged_dict = merge_dictionaries(dict1, dict2)
print(f"Merged dictionary: {merged_dict}")

#q13#
def remove_duplicates_preserve_order(numbers):

  seen = set()
  result = []
  for number in numbers:
    if number not in seen:
      seen.add(number)
      result.append(number)
  return result

numbers = [1, 2, 2, 3, 4, 4, 5]
unique_numbers = remove_duplicates_preserve_order(numbers)
print(f"Original list: {numbers}")
print(f"List with duplicates removed: {unique_numbers}")

#q14#
is_palindrome = lambda text: text.lower().replace(" ", "") == text.lower().replace(" ", "")[::-1]

string1 = "Racecar"
string2 = "hello world"

print(f"'{string1}' is a palindrome: {is_palindrome(string1)}")
print(f"'{string2}' is a palindrome: {is_palindrome(string2)}")

#q15#
def generate_fibonacci(n):

  fibonacci_sequence = []
  a, b = 0, 1
  for _ in range(n):
    fibonacci_sequence.append(a)
    a, b = b, a + b
  return fibonacci_sequence

n = int(input("Enter the number of Fibonacci numbers to generate: "))

fibonacci_numbers = generate_fibonacci(n)
print("Fibonacci Sequence:", fibonacci_numbers)

#q16#
def calculate_average():

  numbers = []
  while True:
    try:
      num_str = input("Enter a number (or 'done' to finish): ")
      if num_str.lower() == 'done':
        break
      num = float(num_str)
      numbers.append(num)
    except ValueError:
      print("Invalid input. Please enter a number or 'done'.")

  if numbers:
    average = sum(numbers) / len(numbers)
    print(f"The average of the entered numbers is: {average}")
  else:
    print("No numbers were entered.")

calculate_average()

#q17#
for i in range(1, 11):
    for j in range(1, 11):
        product = i * j
        print(f"{i} x {j} = {product:2}", end="  ")  # :2 for alignment
    print()

#q18#
def register():
  username = input("Enter your username: ")
  password = input("Enter your password: ")
  users[username] = password
  print("Registration successful!")

def login():
  username = input("Enter your username: ")
  password = input("Enter your password: ")
  if username in users and users[username] == password:
    print("Login successful!")
  else:
    print("Invalid username or password.")

users = {}

while True:
  choice = input("Enter 'register', 'login', or 'quit': ")
  if choice == 'register':
    register()
  elif choice == 'login':
    login()
  elif choice == 'quit':
    break
  else:
    print("Invalid choice.")

#q19#
def word_frequency(words):

  frequency = {}
  for word in words:
    frequency[word] = frequency.get(word, 0) + 1
  return frequency

words = input("Enter a list of words separated by spaces: ").split()

frequencies = word_frequency(words)
print("Word Frequencies:")
for word, freq in frequencies.items():
  print(f"{word}: {freq}")

#q20#
def temperature_converter():

  while True:
    choice = input("Enter 'C' to convert to Celsius, 'F' to convert to Fahrenheit, or 'Q' to quit: ").upper()

    if choice == 'C':
      fahrenheit = float(input("Enter temperature in Fahrenheit: "))
      celsius = (fahrenheit - 32) * 5 / 9
      print(f"{fahrenheit}째F is equal to {celsius:.2f}째C")  # :.2f for 2 decimal places
    elif choice == 'F':
      celsius = float(input("Enter temperature in Celsius: "))
      fahrenheit = (celsius * 9 / 5) + 32
      print(f"{celsius}째C is equal to {fahrenheit:.2f}째F")  # :.2f for 2 decimal places
    elif choice == 'Q':
      break
    else:
      print("Invalid choice. Please enter 'C', 'F', or 'Q'.")

temperature_converter()